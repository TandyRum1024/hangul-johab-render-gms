// 2019-02-25 23:57:24
///hj_draw_comp_ext(kor_font_sprite, ascii_font_sprite, x, y, str, sep, width, colour, alpha)
/*
    (이전버전 벌식) 한글 문자열을 컴파일한 뒤 드로우 합니다.
    
    줄 간격 & 줄당 너비에 제한을 둘 수있습니다.
    대신 지식의 부족으로 수직 정렬을 지원하지 않습니다 OTL
    
    글자 크기는 그대로 글로벌 변수에서 가져옵니다.
    hj_init() 참고!
    
    ==================================
    kor_font_sprite & ascii_font_sprite : 폰트 스프라이트
    (ascii_font_sprite 에 -1를 넣으면 kor_font_sprite으로 ASCII 문자까지 커버합니다.)
    (이전 버전의 global.hjUseAsciiSprite 와 같은 효과)
    
    x, y : 글자 그리는 좌표
    str : 그릴 문자열
    sep : 줄 간격 (글자 높이 제외, -1을 넘기면 자동으로 계산)
    width : 줄당 너비 제한 (한 줄의 너비가 이만큼을 넘으면 자동으로 개행됩니다)
    colour : 글자 색
    alpha : 글자 알파 (투명도)
*/

// 변수
var _str = argument4, _linestr;
var _korspr = argument0, _asciispr = argument0;
var _strx = argument2, _stry = argument3; // 글자 위치
var _offx = _strx, _offy = _stry; // 글자 위치에 더해지는 오프셋 변수 (줄바꿈 & 정렬... ETC에 사용)

var _linestr; // 현재 줄 스트링
var _linewid = 0, _linewidmax = max(argument6, 1); // 현재 줄 너비 & 너비 제한
var _linesep = max(argument5, (max(global.hjCharHeiAscii, global.hjCharHeiHan) + global.hjGlyphLineheight) * -argument5); // 줄 간격

var _strcol = argument7, _stralpha = argument8;
var _strlen = string_length(_str);

// ASCII 관련 변수
var _asciioff = global.hjCompOffAscii;
var _asciicol = 28;
var _asciiwid = global.hjCharWidHan;
var _asciihei = global.hjCharHeiHan;

// 글자 렌더링 준비
if (argument1 != -1)
{
    _asciioff = 0;
    _asciispr = argument1;
    _asciicol = 16;
    
    _asciiwid = global.hjCharWidAscii;
    _asciihei = global.hjCharHeiAscii;
}

// string_char_at 이 드럽게 느려서 배열로 바꿔줍니다.
// https://forum.yoyogames.com/index.php?threads/draw_wrapped_colored_text-optimization-the-mother-of-all-textboxes.35901/
var _strarray = global.hjCacheData[? _str + "_c"];
if (_strarray == undefined)
{
    for (var i=0; i<_strlen; i++)
    {
        var _byte = string_char_at(_str, i + 1);
        _strarray[i] = _byte;
    }
    
    global.hjCacheData[? _str + "_c"] = _strarray;
}
_strlen = array_length_1d(_strarray);

_linestr = hj_string_get_first_line(_str); // 첫 줄 가져오기
_str = string_delete(_str, 1, string_length(_linestr)); // 첫 줄을 제외한 글자 가져오기


// 스트링 너비 & 정렬
var _strwid = _linewidmax;

// 수평 정렬
_strx -= (_strwid >> 1) * global.hjDrawAlignH;
_offx = _strx;


// 글자 렌더링 루틴
var _curchr = "", _curord = $BEEF, _widdata;
var _prevchr = false; // 바로 전 글자
var _kr;
var _idx, _u, _v;
var _first, _mid, _last, _rowlast, _rowmid;
for (var i=0; i<_strlen; i++)
{
    // 현재 위치의 글자 가져오기 & 오프셋 계산
    _curchr = _strarray[@ i];
    _curord = ord(_curchr);
    
    // ASCII (& 줄바꿈 etc)
    if (_curord <= global.hjComp_ASCII_LIMIT)
    {
        // 줄바꿈
        if (_curchr == "#" && _prevchr != "\")
        {
            // 오프셋 값 변경
            _offx = _strx;
            _offy += _linesep;
            
            _linewid = 0;
            continue; // 쌩까기
        }
        
        /*
        _idx = _curord;
        _u = (_idx % _asciicol) * _asciiwid;
        _v = (_idx div _asciicol) * _asciihei + _asciioff;
        draw_sprite_general(_asciispr, 0, _u, _v, _asciiwid, _asciihei, _offx, _offy, 1, 1, 0, _strcol, _strcol, _strcol, _strcol, 1);
        */
        _idx = _curord + _asciioff;
        draw_sprite_ext(_asciispr, _idx, _offx, _offy, 1, 1, 0, _strcol, _stralpha);
        
        // 오프셋 증가
        _offx += _asciiwid + global.hjGlyphKerning;
        _linewid += _asciiwid + global.hjGlyphKerning;
    }
    else if (_curord >= $AC00 && _curord <= $D7AF) // 조합
    {
        _kr = _curord - $AC00;
        
        // 초/중/종성 구하기 & 벌 (오프셋) 구하기
        _first = (_kr div 588);
        _mid = ((_kr % 588) div 28);
        _last = (_kr % 28);
        _rowlast = global.hjComp_LUT_BEOL_MID[@ _mid] * global.hjCompSpecialMiddle;
        _rowmid = global.hjComp_LUT_BEOL_LAST[@ _last] * global.hjCompSpecialLast;
        
        draw_sprite_ext(_korspr, _first + global.hjCompOffFirst + _rowlast + _rowmid * 2, _offx, _offy, 1, 1, 0, _strcol, _stralpha);
        draw_sprite_ext(_korspr, _mid + global.hjCompOffMiddle + _rowmid, _offx, _offy, 1, 1, 0, _strcol, _stralpha);
        draw_sprite_ext(_korspr, _last + global.hjCompOffLast + _rowlast, _offx, _offy, 1, 1, 0, _strcol, _stralpha);
        
        // 오프셋 증가
        _offx += global.hjCharWidHan + global.hjGlyphKerning;
        _linewid += global.hjCharWidHan + global.hjGlyphKerning;
    }
    else if (_curord >= $3130 && _curord <= $3163)// 호환용 자모 ([ㄱㄴㄷㄻㅄ ㅏㅒㅑㅛ] ETC...)
    {
        _kr = _curord - $3130;
        
        draw_sprite_ext(_korspr, _kr + global.hjCompOffJamo, _offx, _offy, 1, 1, 0, _strcol, _stralpha);
        
        // 오프셋 증가
        _offx += global.hjCharWidHan + global.hjGlyphKerning;
        _linewid += global.hjCharWidHan + global.hjGlyphKerning;
    }
    else // 며느리도 모르는 외계어
    {
        _kr = "u["+string(_curord)+"]";
        // draw_sprite_ext(_asciispr, _asciioff + 63, _dx, _dy, 1, 1, 0, c_red, 1); // ????????
        draw_text_colour(_offx, _offy, _kr, c_red, c_red, c_red, c_red, 1);
        
        // 오프셋 증가
        _offx += string_width(_kr) + global.hjGlyphKerning;
        _linewid += string_width(_kr) + global.hjGlyphKerning;
    }
    
    if (_linewid + (global.hjCharWidHan + global.hjGlyphKerning) >= _linewidmax)
    {
        // 오프셋 값 변경
        _offx = _strx;
        _offy += _linesep;
        
        // 현재 줄 넓이 리셋
        _linewid = 0;
    }
    
    // 이전 글자
    _prevchr = _curchr;
}
