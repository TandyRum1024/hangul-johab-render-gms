// 2019-02-17 04:31:21
///hj_draw_dkb_ext(x, y, str, sep, width, colour, alpha)
/*
    도깨비 8x4x4벌식 한글 문자열을 컴파일한 뒤 드로우 합니다.
    줄 간격 & 줄당 너비에 제한을 둘 수있습니다.
    
    대신 지식의 부족으로 수직 정렬을 지원하지 않습니다 OTL
    
    컴파일 된 데이터는 global.hjCache 해시맵 변수에 캐쉬됩니다.
    문자열을 컴파일하지 않고 스트링에서 바로 드로잉할려면 hj_draw_dkb_raw() 를 사용해주세요!
    
    ==================================
    x, y : 글자 그리는 좌표
    str : 그릴 문자열
    sep : 줄 간격 (글자 높이 제외, -1을 넘기면 자동으로 계산)
    width : 줄당 너비 제한 (한 줄의 너비가 이만큼을 넘으면 자동으로 개행됩니다)
    colour : 글자 색
    alpha : 글자 알파 (투명도)
*/
// 변수
var _str = argument2, _strlen;
var _strx = argument0, _stry = argument1; // 글자 위치
var _strcol = argument5, _stralpha = argument6; // 줄 색 & 알파
var _offx, _offy = _stry; // 최종 글자 위치 변수 (줄바꿈 & 정렬... ETC에 사용)

var _linestr; // 현재 줄 스트링
var _linewid = 0, _linewidmax = max(argument4, 1); // 현재 줄 너비 & 너비 제한
var _linesep = argument3; // 줄 간격

// 글자 렌더링 준비
// string_char_at() 이 드럽게 느려서 배열로 바꿔줍니다. 배열로 바꿔주는 김에 초/중/종성 인덱스도 같이 캐시해줍니다.
// https://forum.yoyogames.com/index.php?threads/draw_wrapped_colored_text-optimization-the-mother-of-all-textboxes.35901/
var _strarray = global.hjCacheData[? _str];
if (_strarray == undefined)
{
    _strarray = hj_dkb_compile_str(_str);
    global.hjCacheData[? _str] = _strarray;
}
_strlen = array_length_1d(_strarray);

// 줄 높이 계산
_linesep = max(argument3, (max(global.hjCharHeiAscii, global.hjCharHeiHan) + global.hjGlyphLineheight) * -argument3);

// 글자 너비 & 높이
var _strwid = _linewidmax;
var _strhei = 0;//global.hjCacheMisc[? _str + "_h"];

// 수평 정렬
_strx -= (_strwid >> 1) * global.hjDrawAlignH;
_offx = _strx;
    
// 수직 정렬
//_offy -= (_strhei >> 1) * global.hjDrawAlignV;

// 글자 렌더링 루틴
// 미리 처리된 글자를 _strarray 배열에서 하나씩 빼먹으며 그 데이타로 글자를 드로우합니다.
var _data = -1, _widdata = -1;
var _type, _idx1, _idx2, _idx3;
var _hanw = global.hjCharWidHan + global.hjGlyphKerning;
var _asciiw = global.hjCharWidAscii + global.hjGlyphKerning;
for (var i=0; i<_strlen; i++)
{
    // 현재 위치의 글자 가져오기 & 오프셋 계산
    _data = _strarray[@ i];
    _type = _data[@ 0];
    _idx1 = _data[@ 2];
    _idx2 = _data[@ 3];
    _idx3 = _data[@ 4];
    
    switch (_type)
    {
        case 0: // 다음 줄
            // 오프셋 값 변경
            _offx = _strx;
            _offy += _linesep;
            
            // 현재 줄 넓이 리셋
            _linewid = 0;
            break;
        case 1: // 스페이스바 / 화이트스페이스
            draw_rect(_offx, _offy, 4, 4, c_red);
        
            // 오프셋 증가
            _offx += _asciiw;
            _linewid += _asciiw;
            break;
        default:
        case 2: // ASCII
            draw_sprite_ext(global.hjSpriteAscii, _idx1, _offx, _offy, 1, 1, 0, _strcol, 1);
            
            // 오프셋 증가
            _offx += _asciiw;//global.hjCharWidAscii + global.hjGlyphKerning;
            _linewid += _asciiw;
            break;
        case 3: // 조합형 한글
            draw_sprite_ext(global.hjSpriteHan, _idx1, _offx, _offy, 1, 1, 0, _strcol, 1);
            draw_sprite_ext(global.hjSpriteHan, _idx2, _offx, _offy, 1, 1, 0, _strcol, 1);
            draw_sprite_ext(global.hjSpriteHan, _idx3, _offx, _offy, 1, 1, 0, _strcol, 1);
            
            // 오프셋 증가
            _offx += _hanw;//global.hjCharWidHan + global.hjGlyphKerning;
            _linewid += _hanw;
            break;
            
        case 4: // 한글 자모
            draw_sprite_ext(global.hjSpriteHan, _idx1, _offx, _offy, 1, 1, 0, _strcol, 1);
            
            // 오프셋 증가
            _offx += _hanw;//global.hjCharWidHan + global.hjGlyphKerning;
            _linewid += _hanw;
            break;
    }
    
    if (_linewid + _hanw >= _linewidmax)
    {
        // 오프셋 값 변경
        _offx = _strx;
        _offy += _linesep;
        
        // 현재 줄 넓이 리셋
        _linewid = 0;
    }
}
