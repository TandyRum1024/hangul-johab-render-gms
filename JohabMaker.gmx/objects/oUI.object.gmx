<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>iui_init();
iui_init_vars();
ui_vars();
hj_init();

// WINDOSSSSASDSADSAdWdasd
WIN_WID = room_width;
WIN_HEI = room_height;

/* 
    FONT RELATED
    ==================
*/
fntCurrent = -1;    // Currently loaded font for rendering glyphs; includes ALL the glyphs in the font.
fntName = "NONE";   // Name of currently loaded font
fntPath = "";       // Path of currently loaded font
fntSize = 16;       // Size of font for rendering
FNT_ASCII = true;
FNT_GRID = true;

/* 
    GLYPH RELATED
    ==================
*/
// Grid size
choRows = 2;
jungRows = 1;
jongRows = 2;
jamoRows = 2;
asciiRows = 127 div global.hangulFontRows + 1;

gridWid = global.hangulFontRows;
gridHei = choRows + jungRows + jongRows + jamoRows + asciiRows; // starts from 0

// Character related
charLen = gridWid * gridHei; // Total numbers of cells
charWid = 24; // Single Cell's size/unit... default = 16px monospaced
charHei = 24;
charSelected = -1; // Currently selected character
charData = ds_list_create(); // List of glyph's data made out of array
enum CHAR
{
    SOURCE = 0,
    BAKED,
    MASK,
    X,
    Y,
    OCCUPIED
}
// 0 - The glyph to get original texture (ex : '갈')
// 1 - baked Glyph surface
// 2 - Glyph mask
// 3..4 - glyph offset x and y


/* 
    TEXTURES
    ==================
*/
updatePreview = false;

// Font texture for exporting &amp; preview
fntTex = surface_create(gridWid * charWid, gridHei * charHei);
updateFontSurf = false; // Flag for updating font surface

// Font mask related
maskOverlay = surface_create(charWid, charHei); // rectangle overlay for preview
maskPreview = surface_create(charWid, charHei); // cached mask preview surface
maskTemp = surface_create(charWid, charHei); // temp surface for mask building before applying to character
tempTexA = surface_create(charWid, charHei);
tempTexB = surface_create(charWid, charHei);

textureDestroyed = false; // Texture was destroyed and must load last backup?

/* 
    WINDOW
    ==================
*/
// Font mask editing window
winCropX = 0;
winCropY = uToolbarHei;
winCropPanelSize = 250;
winCropTexSize = 250;
winCropLocalX = 0;
winCropLocalY = 0;

cropmode = 0;
cropping = false;
cropShow = false;
cropX1 = 0;
cropY1 = 0;
cropX2 = 0;
cropY2 = 0;


/* 
    ETC
    ==================
*/
// shashlik
PEPPERONI_SECRET = false;
PEPPIS = false;
PEP_X = 0;
PEP_Y = 0;

// Camera stuff
camVX = 0;
camVY = 0;
camX = (gridWid * charWid) &gt;&gt; 1;
camY = (gridHei * charHei) &gt;&gt; 1;
camZ = 1;
view_wport[0] = WIN_WID;
view_hport[0] = WIN_HEI;

draw_set_font(fntOWO);
reset_char_data_all();
build_font_tex(true, c_black, 1);

window_set_cursor(cr_none);

var _20 = get_default_char(20);
show_debug_message("CHAR #20 : '" + string(ord(_20)) + "' (" + _20 + ")")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Surface heartbeat &amp; window size
// "AAGAGAAAGAAAAGAGGGGAAAGAGAAAGAAGASOAOSSSOASSSOSSOSSSOSSSSOSISISISOSIDIOSMIO"
// - Wilhelm willy wanker, 1829
var _wid = window_get_width(), _hei = window_get_height();
if ((_wid != 0 &amp;&amp; _hei != 0) &amp;&amp;
    _wid != WIN_WID || _hei != WIN_HEI)
{
    WIN_WID = _wid;
    WIN_HEI = _hei;
}

if (!surface_exists(maskTemp))
    maskTemp = surface_create(charWid, charHei);
    
if (!surface_exists(maskPreview))
{
    maskPreview = surface_create(charWid, charHei);
    
    if (!surface_exists(maskTemp))
        maskTemp = surface_create(charWid, charHei);
    
    build_char_surface_preview(charSelected);
}

if (!surface_exists(maskOverlay))
    maskOverlay = surface_create(charWid, charHei);

if (!surface_exists(fntTex))
{
    fntTex = surface_create(WIN_WID, WIN_HEI);
    build_font_tex();
    // build_glyph_surface(charSelected);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// I/O, Camera
iui_update_io();
ui_update();

if (iui_kbFocusItem == -1)
{
    var moveH = keyboard_check(vk_right) - keyboard_check(vk_left);
    var moveV = keyboard_check(vk_down) - keyboard_check(vk_up);
    var moveW = keyboard_check(vk_add) - keyboard_check(vk_subtract);
    
    // camVX += 0.5 * moveH;
    // camVY += 1 * moveV;
    var mult = 2;
    if (keyboard_check(vk_shift))
        mult = 4;
    else if (keyboard_check(vk_control))
        mult = 1;
        
    camX += moveH * mult;
    camY += moveV * mult;
    camZ += (0.005 * moveW) * mult;
    camZ = clamp(camZ, 0.001, 2);
    
}

var _vwid = WIN_WID * camZ;
var _vhei = WIN_HEI * camZ;
view_xview[0] = camX - (_vwid * 0.5);
view_yview[0] = camY - (_vhei * 0.5);
view_wview[0] = _vwid;
view_hview[0] = _vhei;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// glyph selecting &amp; mouse logic &amp; cropping logic
/// Get local X/Y inside crop window
// zoom ratio of panel size and cell size
var zoomRatio = winCropPanelSize / charHei;
var zoomWid = charWid * zoomRatio;
var zoomHei = charHei * zoomRatio;
// offset of clickable panel
var panelOffX = (winCropPanelSize &gt;&gt; 1) - (zoomWid &gt;&gt; 1);
var panelOffY = 42;
// local x y in cell space
winCropLocalX = floor((iui_inputX - (winCropX + panelOffX)) / zoomRatio);
winCropLocalY = floor((iui_inputY - (winCropY + panelOffY)) / zoomRatio);

// Mouse logic
if (winCropLocalX &gt;= 0 &amp;&amp; winCropLocalX &lt; charWid &amp;&amp;
    winCropLocalY &gt;= 0 &amp;&amp; winCropLocalY &lt; charHei)
{
    uiCursorInCrop = true;
    
    // mask editing
    if (mouse_check_button_pressed(mb_left))
    {
        cropping = true;
        cropShow = true;
        
        cropX1 = winCropLocalX;
        cropY1 = winCropLocalY;
        cropX2 = winCropLocalX;
        cropY2 = winCropLocalY;
    }
}
else if (winCropLocalX &gt;= charWid) // We don't want the users able to click through the left panel
{
    uiCursorInCrop = false;
    
    // glyph selecting
    if (mouse_check_button_pressed(mb_left))
    {
        cropping = false;
        cropShow = false;
        
        var _mx = floor(mouse_x / charWid);
        var _my = floor(mouse_y / charHei);
        
        if (_mx &gt;= 0 &amp;&amp; _mx &lt;= gridWid &amp;&amp;
            _my &gt;= 0 &amp;&amp; _my &lt;= gridHei)
        {
            select_char(_mx + _my * gridWid);
            updatePreview = true;
        }
    }
}

// Crop logic
if (iui_keyMod &amp; (1 &lt;&lt; eKEYMOD.SHIFT))
    cropmode = 1;
else if (iui_keyMod &amp; (1 &lt;&lt; eKEYMOD.ALT))
    cropmode = 2;
else
    cropmode = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// more cropping logic
/// More crop / masking logic
if (cropping)
{
    // Disable mask editing once the user has released mouse1
    if (mouse_check_button_released(mb_left))
    {
        cropping = false;
        cropShow = false;
        
        var _tmp;
        if (cropX2 &lt; cropX1)
        {
            _tmp = cropX2;
            cropX2 = cropX1;
            cropX1 = _tmp;
        }
        
        if (cropY2 &lt; cropY1)
        {
            _tmp = cropY2;
            cropY2 = cropY1;
            cropY1 = _tmp;
        }
        
        if (cropmode == 1)
            add_char_mask_to(maskTemp, cropX1, cropY1, cropX2, cropY2);
        else if (cropmode == 2)
            subtract_char_mask_to(maskTemp, cropX1, cropY1, cropX2, cropY2);
        else
            set_char_mask_to(maskTemp, cropX1, cropY1, cropX2, cropY2);
        
        build_char_surface_preview(charSelected);
    }
    else
    {
        cropX2 = winCropLocalX;
        cropY2 = winCropLocalY;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>johab_die();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>iui_inputX = window_mouse_get_x();
iui_inputY = window_mouse_get_y();
iui_inputDown = mouse_check_button(mb_left);

var _generalmargin = 10;
var _smallmargin = 20, _bigmargin = 42;
var _halfmargin = _bigmargin / 1.5;
var _winhalfw = WIN_WID &gt;&gt; 1, _winhalfh = WIN_HEI &gt;&gt; 1;

iui_begin();

iui_align_center();

/*
    TOOL UI BG
    ============
*/
iui_rect(0, 0, WIN_WID, uToolbarHei, uBGCol);
iui_rect(0, uToolbarHei, WIN_WID, 4, COL.WHITE);
uCurrentTab = ui_tab(0, 0, WIN_WID, 24, iui_pack("@=(^0^)", "폰트", "내보내기", "설정", "잡다한거"), uCurrentTab);
iui_align_pop();

/*
    ACTUAL UI
    ============
*/
switch (uCurrentTab)
{
    default:
    case 0:
        /*
            MAIN TAB
            ============
        */
        var _topmargin = _bigmargin;
        
        // info
        iui_label(_smallmargin, _topmargin, "FNTGEN#ZIK@2018", COL.HIGHLIGHT);
        
        iui_align_push(fa_center, fa_top);
        iui_label(_winhalfw, _topmargin + _bigmargin, "방향키로 카메라 이동#+ &amp; - 로 줌 인/아웃#조작하려면 맨 위에 있는 표시줄을 클릭해보시던가요#(아님말고)", COL.WHITE);
        iui_align_pop();
        break;
    
    case 1:
        /*
            FONT TAB
            ============
        */
        var _leftmarginA = _smallmargin;
        var _leftmarginB = _smallmargin + 300 + (_bigmargin &lt;&lt; 1) + 100;
        var _rightmargin = WIN_WID - 300;
        var _topmargin = _bigmargin;
        
        // load &amp; reload section
        var btnLoad = ui_button(_leftmarginA, _topmargin + _bigmargin, 150, 42, "LOAD FONT");
        var btnReload = ui_button(_leftmarginA + 150 + _bigmargin , _topmargin + _bigmargin, 150, 42, "RELOAD");
        iui_label(_leftmarginA, _topmargin, "폰트 : " + string(fntName), COL.HIGHLIGHT);
        
        // font attributes section
        var _off = _leftmarginB + _bigmargin;
        iui_align_push(fa_right, fa_top);
        
        iui_label(_off, _topmargin, "폰트 크기 : ", uTextCol);
        iui_label(_off, _topmargin + _bigmargin, "격자 크기 : ", uTextCol);
        iui_label(_off, _topmargin + (_bigmargin &lt;&lt; 1), "ASCII 사용 : ", uTextCol);
        iui_label(_off + _smallmargin + 90 + (string_width("X") &gt;&gt; 1), _topmargin + _bigmargin, "X", uTextCol);
        
        tbFntSize = ui_textbox_numberonly(_off + _smallmargin, _topmargin, 80, 32, string(tbFntSize), "FONTSIZE", 0);
        tbCellWid = ui_textbox_numberonly(_off + _smallmargin, _topmargin + _bigmargin, 80, 32, string(tbCellWid), "CELLWID", 1);
        tbCellHei = ui_textbox_numberonly(_off + _smallmargin + 100, _topmargin + _bigmargin, 80, 32, string(tbCellHei), "CELLHEI", 1);
        cbAscii = ui_checkbox(_off + _smallmargin, _topmargin + (_bigmargin &lt;&lt; 1), 16, 16, cbAscii, "ASCII");
        FNT_ASCII = cbAscii;
        
        iui_align_pop();
        
        iui_label(_rightmargin, _topmargin, "격자 최종 크기 : [" + string(gridWid) + ", " + string(gridHei) + "]", uTextCol);
        iui_label(_rightmargin, _topmargin + _bigmargin, "텍스쳐 사이즈 : [" + string(gridWid * charWid) + ", " + string(gridHei * charHei) + "]", uTextCol);
        
        /// Buttons
        if (btnLoad)
        {
            var _path = get_open_filename("폰트 파일|*.ttf", "폰트를 선택해 주세요.");
            
            if (_path != "")
            {
                charWid = real(tbCellWid);
                charHei = real(tbCellHei);
                
                show_debug_message("Path : " + _path);
                update_font_attribs();
                load_font(_path, real(tbFntSize));
            }
        }
        
        if (btnReload)
        {
            if (fntPath != "")
            {
                charWid = real(tbCellWid);
                charHei = real(tbCellHei);
                
                update_font_attribs();
                load_font(fntPath, real(tbFntSize));
            }
        }
        break;
    
    case 2:
        /*
            EXPORT TAB
            ============
        */
        
        var _leftmarginA = _smallmargin;
        var _leftmarginB = _smallmargin + 300 + (_bigmargin &lt;&lt; 1) + 100;
        var _rightmargin = WIN_WID - 300;
        var _topmargin = _bigmargin;
        
        // load &amp; reload section
        var btnExport = ui_button(_leftmarginA, _topmargin + _bigmargin, 150, 42, "내보내기!");
        
        // Attribs
        var _off = _leftmarginB + _bigmargin;
        iui_align_push(fa_right, fa_top);
        
        iui_label(_off, _topmargin + (_bigmargin &lt;&lt; 1), "격자 내보내기 : ", uTextCol);
        iui_label(_off + _smallmargin + 90 + (string_width("X") &gt;&gt; 1), _topmargin + _bigmargin, "X", uTextCol);
        cbExportGrid = ui_checkbox(_off + _smallmargin, _topmargin + (_bigmargin &lt;&lt; 1), 16, 16, cbExportGrid, "EXPORT_GRID");
        
        iui_align_pop();
        
        /// Buttons
        if (btnExport)
        {
            var _path = get_save_filename("PNG 폰트 이미지|*.png", "font" + string(charWid) + "x" + string(charWid));
            
            if (_path != "")
            {
                // export!
                export_font_tex(_path, cbExportGrid, false, c_black);
            }
        }
        break;
}

/*
    GLYPH EDITING
    ============
*/
var _data = charData[| charSelected];
var _winhalf = (winCropPanelSize * 0.5);
var _wincx = winCropX + _winhalf;

iui_align_center();
iui_rect(winCropX, winCropY, winCropPanelSize, 42, COL.HIGHLIGHT); // top title
iui_rect(winCropX, winCropY + 42, winCropPanelSize, WIN_HEI - (winCropY + 42), COL.BASE);
iui_label(_wincx, winCropY + 21, "글자 누끼", uTextCol);
ui_tooltip(winCropX + winCropPanelSize - 42, winCropY, 42, 42, "마우스를 끌어 사각형을 그리면서#폰트의 누끼를 딸 수 있읍니다..#============#SHIFT 단추로 누적 모드#ALT 단추로 빼기 모드", 5, COL.BASE, false, true, COL.HIGHLIGHT2);

// inputs
iuiButtonShadow = false;
var _btnwid = winCropPanelSize / 3;
var _btnhei = 50;
var _btnhalf = _btnwid &gt;&gt; 1;
var btnSet = ui_button_icon(winCropX, winCropY + winCropPanelSize + 42, _btnwid, _btnhei, "마스크 적용##BTNSET", 2, c_black);
var btnDel = ui_button_icon(winCropX + winCropPanelSize - _btnwid, winCropY + winCropPanelSize + 42, _btnwid, _btnhei, "현재 적용중인 마스크 삭제##BTNDEL", 4, c_black);
var btnAll = ui_button_icon(_wincx - _btnhalf, winCropY + winCropPanelSize + 42, _btnwid, _btnhei, "같은 줄 모두 적용##BTNALL", 3, c_black);

var _attribtopmargin = winCropY + winCropPanelSize + 42 + _btnhei; // + (_bigmargin &lt;&lt; 1);

_attribtopmargin += (_bigmargin &lt;&lt; 1);

iui_label(_wincx, _attribtopmargin, "-=[쌤플 글자 (빈칸=기본값)]=-", uTextCol);
iui_label(_wincx, _attribtopmargin + _halfmargin * 3, "-=[글자 상대 위치]=-", uTextCol);

if (_data != undefined)
{
    var _offmarginy = _attribtopmargin + _halfmargin * 3 + _smallmargin;
    iui_label(winCropX + _smallmargin, _offmarginy, "X : ", uTextCol);
    iui_label(_wincx + _smallmargin, _offmarginy, "Y : ", uTextCol);
    
    _offmarginy -= 16;
    _data[@ CHAR.X] = ui_textbox_numberonly(winCropX + _smallmargin + _bigmargin, _offmarginy, 80, 32, string(_data[@ CHAR.X]), "CHAR_OFF_X", 0);
    _data[@ CHAR.Y] = ui_textbox_numberonly(_wincx + _smallmargin + _bigmargin, _offmarginy, 80, 32, string(_data[@ CHAR.Y]), "CHAR_OFF_Y", 0);
    
    // _data[@ CHAR.SOURCE] = ui_textbox_numberonly(_wincx - 40, _attribtopmargin + _smallmargin, 80, 32, string(_data[@ CHAR.SOURCE]), "CHAR_SRC", 0);
}

iuiButtonShadow = true;
iui_align_pop();

// Draw glyph preview / crop panel view
var _zoomRatio = winCropTexSize / charHei;
var _zoomWid = charWid * _zoomRatio;
var _zoomHei = charHei * _zoomRatio;

var panelOffX = winCropX + (winCropPanelSize &gt;&gt; 1) - (_zoomWid &gt;&gt; 1);
var panelOffY = winCropY + 42;

iui_rect(panelOffX, panelOffY, _zoomWid, _zoomHei, 0);

// Mask preview
draw_surface_stretched(maskPreview, panelOffX, panelOffY, _zoomWid, _zoomHei);
// overlay
draw_surface_stretched(maskOverlay, panelOffX, panelOffY, _zoomWid, _zoomHei);

// iui_rect(winCropX, winCropY + 42, _zoomWid, _zoomHei, 0);
// draw_surface_stretched(glyphSurf, winCropX + _winhalf - (_zoomWid * 0.5), winCropY + 42 + _winhalf - (_zoomHei * 0.5), _zoomWid, _zoomHei);
// draw_surface_stretched(glyphSurfOverlay, winCropX + _winhalf - (_zoomWid * 0.5), winCropY + 42 + _winhalf - (_zoomHei * 0.5), _zoomWid, _zoomHei);
iui_end();

/*
    BUTTONS
*/
if (btnSet)
{
    // Copy mask to dest
    var _data = charData[| charSelected];
    if (is_array(_data) &amp;&amp; surface_exists(_data[@ CHAR.MASK]))
        surface_copy(_data[@ CHAR.MASK], 0, 0, maskTemp);
    
    build_char_surface(charSelected);
    updateFontSurf = true;
    updatePreview = true;
}

if (btnAll)
{
    var _y = charSelected div gridWid;
    var _data = charData[| charSelected];
    var _mask = _data[@ CHAR.MASK];
    var _srcx = _data[@ CHAR.X];
    var _srcy = _data[@ CHAR.Y];
    
    // Copy the mask surface &amp; paste all over it
    for (var i=0; i&lt;gridWid; i++)
    {
        var _off = _y * gridWid + i;
        var _data = charData[| _off];
        
        if (is_array(_data) &amp;&amp; _data[@ CHAR.OCCUPIED])
        {
            surface_copy(_data[@ CHAR.MASK], 0, 0, _mask);
            
            _data[@ CHAR.X] = _srcx;
            _data[@ CHAR.Y] = _srcy;
            charData[| _off] = _data;
            
            build_char_surface(_off);
        }
    }
    
    updateFontSurf = true;
}

if (btnDel)
{
    cropping = false;
    cropShow = false;
    cropX1 = 0;
    cropY1 = 0;
    cropX2 = 0;
    cropY2 = 0;
    
    reset_char_data(charSelected);
    updateFontSurf = true;
}

// oh wtf
if (PEPPIS)
{
    var _maxx = max(window_mouse_get_x(), PEP_X), _minx = min(window_mouse_get_x(), PEP_X);
    var _maxy = max(window_mouse_get_y(), PEP_Y), _miny = min(window_mouse_get_y(), PEP_Y);
    var _dx = _maxx - _minx, _dy = _maxy - _miny;
    
    draw_rectangle_colour(_minx, _miny, _maxx, _maxy, COL.HIGHLIGHT, COL.HIGHLIGHT, COL.HIGHLIGHT, COL.HIGHLIGHT, true);
    
    draw_set_valign(fa_bottom);
    iui_label(_minx, _miny, "[" + string(_minx / WIN_WID) + ", " + string(_miny / WIN_HEI) + "]#[" + string(_minx) + "px, " + string(_miny) + "px]", $00DDFF);
    
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    iui_label(_minx + (_dx &gt;&gt; 1), _miny + (_dy &gt;&gt; 1), "[" + string(_dx / WIN_WID) + ", " + string(_dx / WIN_HEI) + "]#[" + string(_dx) + "px, " + string(_dx) + "px]", $00DDFF);
    
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    iui_label(_maxx, _maxy, "[" + string(_maxx / WIN_WID) + ", " + string(_maxy / WIN_HEI) + "]#[" + string(_maxx) + "px, " + string(_maxy) + "px]", $00DDFF);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// tooltip and cursor
// Tooltip
if (uiTooltipShow)
{
    var _labelwid = string_width(uiTooltipMsg) + 20;
    var _labelhei = string_height(uiTooltipMsg) + 20;
    
    iui_align_center();
    iui_rect(iui_inputX + 10, iui_inputY + 10, _labelwid, _labelhei, 0); // shadow
    iui_rect(iui_inputX - 1, iui_inputY - 1, _labelwid + 2, _labelhei + 2, COL.BASE);
    iui_rect(iui_inputX, iui_inputY, _labelwid, _labelhei, COL.WHITE);
    iui_label(iui_inputX + (_labelwid &gt;&gt; 1), iui_inputY + (_labelhei &gt;&gt; 1), uiTooltipMsg, COL.BASE);
    iui_align_pop();
}

// Cursor logic
if (uiCursorInCrop)
{
    if (cropmode == 1)
        uiCursor = 1;
    else if (cropmode == 2)
        uiCursor = 2;
    else
        uiCursor = 3;
}
else
{
    uiCursor = 0;
}
draw_sprite(spr_mouse, uiCursor, iui_inputX, iui_inputY);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update glyph overlay

var zoomRatio = winCropPanelSize / charHei;
var zoomWid = charWid * zoomRatio;
var zoomHei = charHei * zoomRatio;
var panelOffX = (winCropPanelSize &gt;&gt; 1) - (zoomWid &gt;&gt; 1);
var panelOffY = 42;

var lx = floor((window_mouse_get_x() - (winCropX + panelOffX)) / zoomRatio);
var ly = floor((window_mouse_get_y() - (winCropY + panelOffY)) / zoomRatio);

surface_set_target(maskOverlay);
draw_clear_alpha(0, 0);

var data = charData[| charSelected];

if (lx &gt;= 0 &amp;&amp; lx &lt;= charWid &amp;&amp;
    ly &gt;= 0 &amp;&amp; ly &lt;= charHei)
{
    // draw pos
    iui_rect(lx, ly, 1, 1, c_red);
}

// draw bbox if set
var _col = c_blue;
var _alpha = 0.8;

if (cropShow)
{
    var bx = min(cropX1, cropX2), by = min(cropY1, cropY2), bw = abs(cropX2 - cropX1), bh = abs(cropY2 - cropY1);
    iui_rect_alpha(bx, by, bw, 1, _col, _alpha);
    iui_rect_alpha(bx, by, 1, bh, _col, _alpha);
    iui_rect_alpha(bx, by + bh, bw, 1, _col, _alpha);
    iui_rect_alpha(bx + bw, by, 1, bh + 1, _col, _alpha);
}

surface_reset_target();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw glyphs!!
draw_clear(COL.GRAY);

// surface
iui_rect(10, 10, surface_get_width(fntTex), surface_get_height(fntTex), COL.BASE); // shadow
draw_surface(fntTex, 0, 0); // draw hangul stuff

// Draw glyph pick hint
var _mx = floor(mouse_x / charWid) * charWid;
var _my = floor(mouse_y / charHei) * charHei;

iui_rect_alpha(_mx, _my, charWid, charHei, $FF00FF, 0.25);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (updateFontSurf)
{
    updateFontSurf = false;
    
    // show_debug_message("Building characters...");
    // build_char_surface_all();
    show_debug_message("Building font texture...");
    build_font_tex();
    
    // reset preview glyph
    build_char_surface_preview(charSelected);
}

if (updatePreview)
{
    updatePreview = false;
    build_char_surface_preview(charSelected);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
