// 2018-12-30 20:32:09
#define build_char_surface
///build_char_surface(index)
/*
    Updates glyph surface from glyph index for use in font texture building
*/

// var
#args index
    
if (index < 0)
    return -1;

// Build character to draw
var data = charData[| index];
var glyphX = index % global.hangulFontRows, glyphY = index div global.hangulFontRows, char = "";

if (data[@ CHAR.SAMPLE] != "")
{
    char = data[@ CHAR.SAMPLE];
}
else
{
    switch (glyphY)
    {
        case 0: // Choseong beol 1
            char = chr($AC00 + ((glyphX * 21) + 0) * 28 + 16);
            break;
        
        case 1: // Choseong beol 2
            char = chr($AC00 + ((glyphX * 21) + 8) * 28 + 16);
            break;
            
        case 2: // Jungseong
            char = chr($AC00 + glyphX * 28 + 16);
            break;
        
        case 3: // Jongseong beol 1
            char = chr($AC00 + glyphX);
            break;
        
        case 4: // Choseong beol 2
            char = chr($AC00 + ((1 * 21) + 8) * 28 + glyphX);
            break;
            
        case 5: // Compat. Jamo
        case 6:
            var _off = $3130 + (index - gridWid * 5);
            
            if (_off >= $3130 && _off <= $3163)
                char = chr(_off);
            break;
            
        default: // ASCII
            char = chr(index - gridWid * 7);
    }
}


// clear surface
if (surface_exists(glyphSurf))
    surface_resize(glyphSurf, charWid, charHei);
else
    glyphSurf = surface_create(charWid, charHei);
    
surface_resize(glyphSurfOverlay, charWid, charHei);

if (!data[@ CHAR.BBOX]) // direct
{
    surface_set_target(glyphSurf);
    draw_clear_alpha(0,0);
    
    draw_set_font(fntTemp);
    iui_align_center();
    iui_label(charWid/2, charHei/2, char, c_white);
    iui_align_pop();
    draw_set_font(fntOWO);
    
    surface_reset_target();
}
else
{
    var _surf = surface_create(charWid, charHei);
    
    // Draw glyph to temp surface
    surface_set_target(_surf);
    draw_clear_alpha(0,0);
    
    draw_set_font(fntTemp);
    iui_align_center();
    iui_label(charWid/2, charHei/2, char, c_white);
    iui_align_pop();
    draw_set_font(fntOWO);
    
    surface_reset_target();
    
    
    // Draw temp surface to final surface, cropped.
    surface_set_target(glyphSurf);
    draw_clear_alpha(0,0);
    draw_surface_part(_surf, data[@ CHAR.X], data[@ CHAR.Y], data[@ CHAR.W]+1, data[@ CHAR.H]+1, data[@ CHAR.X], data[@ CHAR.Y]);
    surface_reset_target();
    
    surface_free(_surf);
}

#define build_glyph_surface_preview
///build_glyph_surface_preview(index)
/*
    Updates glyph surface from glyph index for display
*/

// var
#args index
var glyphX = index % gridWid, glyphY = index div gridWid, char = "";
if (index < 0)
    return -1;

// Build character to draw
switch (glyphY)
{
    case 0: // Choseong beol 1
        char = chr($AC00 + ((glyphX * 21) + 0) * 28 + 16);
        break;
    
    case 1: // Choseong beol 2
        char = chr($AC00 + ((glyphX * 21) + 8) * 28 + 16);
        break;
        
    case 2: // Jungseong
        char = chr($AC00 + glyphX * 28 + 16);
        break;
    
    case 3: // Jongseong beol 1
        char = chr($AC00 + glyphX);
        break;
    
    case 4: // Choseong beol 2
        char = chr($AC00 + ((1 * 21) + 8) * 28 + glyphX);
        break;
        
    case 5: // Compat. Jamo
    case 6:
        var _off = $3130 + (index - gridWid * 5);
        
        if (_off >= $3130 && _off <= $3163)
            char = chr(_off);
        break;
        
    default: // ASCII
        char = chr(index - gridWid * 7);
}


// clear surface
if (surface_exists(glyphSurf))
    surface_resize(glyphSurf, charWid, charHei);
else
    glyphSurf = surface_create(charWid, charHei);
surface_resize(glyphSurfOverlay, charWid, charHei);

surface_set_target(glyphSurf);
draw_clear_alpha(0,0);


// Draw glyph to surface
draw_set_font(fntTemp);
iui_align_center();
iui_label(charWid/2, charHei/2, char, c_white);
iui_align_pop();
draw_set_font(fntOWO);

surface_reset_target();
#define build_glyph_old
///build_char_surfaces()
/*
    Build font surfaces
    The problem -- Surfaces in Gamemaker is hella """volatile"""
    So I'm gonna try save them into buffer
    
    ========
    "Also just a heads up it's BGRA format, but if you look at the buffer in the Debugger,
    it's displayed in ARGB. Made debugging confusing.
    Also, for some reason, buffer_set_surface() only works if you __don't modify the buffer__ at all.
    I thought I got it to work once, but i can't find my post that i'd have posted if i did."
    
    .. Dear god yoyo games plzfix asap
*/

// #args font

// set vars
gridHei = 7;

if (USE_ASCII)
    gridHei = 12;

// rebuild
charLen = gridWid * gridHei;
reset_char_surfaces();

/*
    BUILD LIST OF SURFACES
    ====================
*/
/*
var _surf = ds_list_create();//surface_create(charWid, charHei);
var _midX = charWid>>1, _midY = charHei>>1;

for (var i=0; i<charLen; i++)
{
    _surf[| i] = surface_create(charWid, charHei);
}
*/
/*
surface_set_target(_surf);
draw_clear_alpha(0,0);
iui_label(_midX, _midY, string(i), c_white);
surface_reset_target();
*/

/*
    WRITE GLYPHS
    ====================
*/
// draw_set_halign(1);draw_set_valign(1);

/*
    Compat Jamo range -- $3130 ~ $3163
    For Choseong, Jungseong, Jongseong & Compat. Jamo
*/
/*
if (font_exists(fntTemp))
    font_delete(fntTemp);
fntTemp = font_add(font, fntSize, false, false, $3130, $3163);
*/
/*
draw_set_font(fntTemp);
var lut = "ㄱㄲㄴㄷㄸㄹㅁㅂㅃㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎ";
var offset = 0;
var _idx, _data, _char;

// Build Chosung (Row 1 & 2)
for (var i=0; i<string_length(lut); i++)
{
    _idx = i + offset;
    
    // BEOL #1
    _data = charData[| _idx];
    if (_data[@ CHAR.SAMPLE] == "")
        _char = chr($AC00 + ((i * 21) + 0) * 28 + 16);
    else
        _char = _data[@ CHAR.SAMPLE];
    // _char = string_char_at(lut, i + 1); // rebuild hangul from cho-jung-jongseong
        
    surface_set_target(_surf[| _idx]);
    draw_clear(0);
    iui_label(_midX, _midY, _char, c_white);
    surface_reset_target();
    
    // BEOL #2
    _idx += gridWid;
    _data = charData[| _idx];
    if (_data[@ 0] == "")
        _char = chr($AC00 + ((i * 21) + 8) * 28 + 16);
    else
        _char = _data[@ CHAR.SAMPLE];
    
    surface_set_target(_surf[| _idx]);
    draw_clear(0);
    iui_label(_midX, _midY, _char, c_white);
    surface_reset_target();
}

// Build Jungseong
offset = 2 * gridWid;
lut = "ㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅣ";

for (var i=0; i<string_length(lut); i++)
{
    _idx = i + offset;
    // _char = string_char_at(lut, i + 1);
    
    _data = charData[| _idx];
    if (_data[@ CHAR.SAMPLE] == "")
        _char = chr($AC00 + i * 28 + 16);
    else
        _char = _data[@ CHAR.SAMPLE];
        // TODO!!
    
    surface_set_target(_surf[| _idx]);
    draw_clear(0);
    iui_label(_midX, _midY, _char, c_white);
    surface_reset_target();
}

// Build Jongseong (Row 4 & 5)
offset = 3 * gridWid + 1; // leave first one empty
lut = "ㄱㄲㄳㄴㄵㄶㄷㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅄㅅㅆㅇㅈㅊㅋㅌㅍㅎ";

for (var i=0; i<string_length(lut); i++)
{
    _idx = i + offset;
    // _chr = string_char_at(lut, i + 1);
    
    // BEOL #1
    _data = charData[| _idx];
    if (_data[@ 0] == "")
        _char = chr($AC00 + i + 1);
    else
        _char = _data[@ 0];
    surface_set_target(_surf[| _idx]);
    draw_clear(0);
    iui_label(_midX, _midY, _char, c_white);
    surface_reset_target();
    
    // BEOL #2
    _idx += gridWid;
    _data = charData[| _idx];
    if (_data[@ 0] == "")
        _char = chr($AC00 + ((1 * 21) + 8) * 28 + i + 1);
    else
        _char = _data[@ 0];
    surface_set_target(_surf[| _idx]);
    draw_clear(0);
    iui_label(_midX, _midY, _char, c_white);
    surface_reset_target();
}

// Build Compat. Jamo (Row 6 & 7)
offset = 5 * gridWid + 1;
lut = "ㄱㄲㄳㄴㄵㄶㄷㄸㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅃㅄㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅣ";

for (var i=0; i<string_length(lut); i++)
{
    _char = string_char_at(lut, i + 1);
    
    surface_set_target(_surf[| i + offset]);
    draw_clear(0);
    iui_label(_midX, _midY, _char, c_white);
    surface_reset_target();
}
*/

/*
    ASCII -- 0 ~ 255
    AEUHHHH!?!?!?!?!
*/
/*
if (USE_ASCII)
{
    // if (font_exists(fntTemp))
    //    font_delete(fntTemp);
    // fntTemp = font_add(font, fntSize, false, false, 0, 255);
    
    offset = 7 * gridWid;
    var remain = charLen - offset;
    for (var i=0; i<remain; i++)
    {
        _chr = chr(i);
        
        surface_set_target(_surf[| i + offset]);
        draw_clear(0);
        iui_label(_midX, _midY, _chr, c_white);
        surface_reset_target();
    }
}
*/

/*
    Assign sprites
*/
/*
sprite_delete(charSpr);
// charSpr = sprite_create_from_surface(_surf[| 0], 0, 0, charWid, charHei, false, false, 0, 0);
for (var i=0; i<charLen; i++)
{
    if (sprite_exists(charSpr)) // exists
        sprite_add_from_surface(charSpr, _surf[| i], 0, 0, charWid, charHei, false, false);
    else // nyet
        charSpr = sprite_create_from_surface(_surf[| i], 0, 0, charWid, charHei, false, false, 0, 0);
}
*/


// Redraw surface contents
/*
surface_set_target(fntTex);

// clear
draw_clear_alpha(0,0);

// Draw glyph sprites
for (var i=0; i<charLen; i++)
{
    // get gridwise position
    var _gx = (i % gridWid);
    var _gy = (i div gridWid);
    
    // draw
    // draw_sprite(charSpr, i, _gx * charWid, _gy * charHei);
    draw_surface(_surf[| i], _gx * charWid, _gy * charHei);
}

// grid??
var _texW = _newWid;
var _texH = _newHei;
for (var X=0; X<=gridWid; X++)
{
    for (var Y=0; Y<=gridHei; Y++)
    {
        var _worldX = X * charWid;
        var _worldY = Y * charHei;
        iui_rect(_worldX - 1, 0, 2, _texH, $FF00FF);
        iui_rect(0, _worldY - 1, _texW, 2, $FF00FF);
    }
}

surface_reset_target();
*/
/*
sprite_delete(charSpr);
charSpr = sprite_create_from_surface(_surf, 0, 0, charWid, charHei, false, false, 0, 0);
for (var i=0; i<charLen; i++)
{
    if (sprite_exists(charSpr)) // exists
    {
        sprite_add_from_surface(charSpr, _surf, 0, 0, charWid, charHei, false, false);
    }
    else // nyet
    {
        charSpr = sprite_create_from_surface(_surf, 0, 0, charWid, charHei, false, false, 0, 0);
    }
}
*/
/*
    DESTROY LIST OF SURFACES
    ====================
*/
/*
for (var i=0; i<charLen; i++)
{
    surface_free(_surf[| i]);
}
ds_list_destroy(_surf);

draw_set_halign(0);draw_set_valign(0);
draw_set_font(fntOWO);
*/